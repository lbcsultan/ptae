{"version":3,"sources":["./src/app/components/about/about.component.ts","./src/app/components/about/about.component.html","crypto (ignored)","./src/environments/environment.ts","./src/app/components/home/home.component.ts","./src/app/components/home/home.component.html","./src/app/components/profile/profile.component.html","./src/app/components/profile/profile.component.ts","./src/app/components/encrypt/encrypt.component.ts","./src/app/components/encrypt/encrypt.component.html","./src/app/components/list/list.component.html","./src/app/components/list/list.component.ts","./src/app/components/dashboard/dashboard.component.html","./src/app/components/dashboard/dashboard.component.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/guards/auth.guard.ts","./src/app/components/login/login.component.ts","./src/app/components/login/login.component.html","./src/app/components/register/register.component.ts","./src/app/components/register/register.component.html","./src/app/app.module.ts","./src/app/components/mac/mac.component.ts","./src/app/components/mac/mac.component.html","./src/app/services/validate.service.ts","./src/app/components/navbar/navbar.component.html","./src/app/components/navbar/navbar.component.ts","./src/app/components/blog/blog.component.html","./src/app/components/blog/blog.component.ts","./src/app/services/auth.service.ts","./src/app/components/cert/cert.component.ts","./src/app/components/cert/cert.component.html","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.scss']\n})\nexport class AboutComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<div>\n\n  <h2 class=\"page-header\">What is Paired Token? </h2>\n\n  <div class=\"alert alert-info\" role=\"alert\">\n    <h5>\n      Paired token (PT) is a new secondary credential scheme that provides stateless pre-shared key (PSK) in a client-server environment. The server issues a paired token (public token and secret token) to an authenticated client where the public token has the role of signed identity and the secret token is a kind of shared secret. Once a client is equipped with PT, it can be used for many symmetric key-based cryptographic applications such as authentication, authorization, key establishment, etc.\n    </h5>\n\n  </div>\n\n  <h2 class=\"page-header\">What is Paired Token Authentication? </h2>\n\n  <div class=\"alert alert-warning\" role=\"alert\">\n    <h5>\n      OAuth2.0 (and JWT) is the standard token authentication technology that is widely used in modern web services. OAuth 2.0 bearer token is widely used for stateless authentication in web environment, but it is vulnerable to eavesdropping attack. Thus, it should be used only in secure communication environment like https that it cannot\n      provide stateless authentication. OAuth 2.0 MAC token is designed to provide randomized authentication using message authentication code that it can be used in non-secure communication environment, but it cannot provide stateless authentication since server has to keep the track of all mac keys for every client. <br><br>\n\n      Paired-token authentication is newly developed token authentication technology that uses paired-token instead of single token. Server issues paired-token (public token and secret token) to logged in client (web browser). Then client can prove its authenticity instantly in time-dependent one-time way using the paired-token, and the server\n      can verify it stateless way without managing any user dependent information. <br><br>\n\n      This is a simplified model service that demonstrate the paired-token authentication.\n    </h5>\n\n  </div>\n\n\n  <h2 class=\"page-header\">Implementation Environment </h2>\n\n  <div class=\"alert alert-info\" role=\"alert\">\n    <b>MEAN Stack </b>\n    <p>\n      Web development using MongoDB/Express/Angular/Node.js\n    </p>\n\n    <b>Node.js/Express Backend </b>\n    <p>\n      Backend service using node.js and express\n    </p>\n\n    <b>Angular/Cli Frontend </b>\n    <p>\n      Easy web development using Angular front-end framework\n    </p>\n\n    <b>Ionic Framework </b>\n    <p>\n      Dual(iOS/Android) mode mobile app development using Ionic framework\n    </p>\n\n    <b>Heroku Deployment </b>\n    <p>\n      Heroku Cloud Service\n    </p>\n\n    <b>MongoDB Compass </b>\n    <p>\n      MongoDB as a Service\n    </p>\n  </div>\n\n  <h2 class=\"page-header\">Security Technologies</h2>\n\n  <div class=\"alert alert-warning\" role=\"alert\">\n    <b>Paired-Token Authentication </b>\n    <p>\n      Server issues paired-token(public token/secret token) to logged in users <br>\n      Keeping authenticated state using paired-token through plain communication channel <br>\n      High performance without https requirement <br>\n    </p>\n\n    <b>JWT Authentication </b>\n    <p>\n      Application example of JWT authentication <br>\n      It should be executed in https secure communication\n    </p>\n\n    <b>Issuing Certificate </b>\n    <p>\n      Server issues certificate to logged-in user\n    </p>\n\n    <b>Signature-based One-click Quick Login </b>\n    <p>\n      Implement one-click quick login using digital signature and certificate\n    </p>\n\n    <b>Secure ID/Pass Login </b>\n    <p>\n      Server delievers server certificate to client when root(home) page is connected. <br>\n      ID/Pass login information was encrypted with server certificate. <br>\n      Server sends dual-token to client in encrypted way\n    </p>\n\n    <b>Simple Encryption Channel using Paired Token </b>\n    <p>\n      Generate one-time key using paired-token and apply to message encryption\n    </p>\n\n    <b>Simple Message Authentication using Paired Token </b>\n    <p>\n      Generate one-time key using paired-token and apply to message authentication\n    </p>\n  </div>\n\n  <h2 class=\"page-header\">Details of Generation and Usage of Paired-Token </h2>\n\n  <div class=\"alert alert-info\" role=\"alert\">\n    <b>Issuing paired-token by server </b>\n    <p>\n      ptoken = JWT(userInfo, serverSecretKey) <br>\n      stoken = JWT(ptoken, serverSecretKey) <br>\n      Server sends [ptoken, stoken] to client <br>\n      Client saves [ptoken, stoken] in LocalStorage of the browser\n    </p>\n\n    <b>Generating one-time auth info by client </b>\n    <p>\n      Generate client current time (ctime) <br>\n      Compute auth = Hash(ctime, stoken) <br>\n      Client sends [ctime, ptoken, auth] to server\n    </p>\n\n    <b>Verification of client authentication by server </b>\n    <p>\n      Generate server current time (stime) <br>\n      Compute stoken from ptoken: stoken = JWT(ptoken, serverSecretKey) <br>\n      Compute auth' = Hash(ctime, stoken) <br>\n      Verification: (1) Check time difference, (2) Verification of ptoken, (3) Match auth=?auth'\n    </p>\n\n  </div>\n\n  <h2 class=\"page-header\">Notices </h2>\n\n  <div class=\"alert alert-warning\" role=\"alert\">\n    <b>When ID/pass login fails </b>\n    <p>\n      Reload Home page, which will deliever server certificate. <br>\n      ID/Pass login uses server certificate to protect login information from eavesdropping.\n    </p>\n\n    <b>When easy login fails </b>\n    <p>\n      You can utilize easy login only when the client browser is equipped with certificate. You need to get the\n      certificate first.\n    </p>\n  </div>\n\n  <h2 class=\"page-header\">Contact Info. </h2>\n\n  <div class=\"alert alert-info\" role=\"alert\">\n    <b>Professor Byoungcheon Lee </b>\n    <p>\n      - Department of Information Security, Joongbu University, Korea <br>\n      - Email: sultan @ joongbu . ac . kr <br>\n      - Homepage: <a href=\"http://cris.joongbu.ac.kr\"> http://cris.joongbu.ac.kr</a>\n\n    </p>\n\n  </div>\n","/* (ignored) */","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport { Router } from '@angular/router';\nimport { FlashMessagesService } from 'angular2-flash-messages';\nimport * as forge from 'node-forge';\nconst pki = forge.pki;\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  currentTime: any;\n  nonceHex: any;\n  caCertPem: any;\n  signatureHex: any;\n  verified: any;\n  caCommon: any;\n  caOrganization: any;\n  caOU: any;\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private flashMessage: FlashMessagesService\n  ) { }\n\n  ngOnInit() {\n    this.authService.connectHome().subscribe(data => {\n      this.currentTime = new Date(data.currentTime);  // Server current time\n      this.nonceHex = data.nonceHex;\n      this.caCertPem = data.caCertPem;\n      this.signatureHex = data.signatureHex;\n\n      let caCert = pki.certificateFromPem(data.caCertPem);\n      let caPublicKey = caCert.publicKey;\n      let signature = forge.util.hexToBytes(data.signatureHex);\n      let clientTime = new Date().getTime();          // Client current time\n      let diff = clientTime - data.currentTime;\n\n      let md = forge.md.sha1.create();\n      md.update(data.currentTime, 'utf8');\n      md.update(data.nonceHex, 'utf8');\n      let result = caPublicKey.verify(md.digest().bytes(), signature);\n      if (result == true && diff < 100000) {\n        this.verified = result;\n        localStorage.setItem('caCert', data.caCertPem);\n      }\n\n      this.caCommon = caCert.subject.getField('CN').value;\n      this.caOrganization = caCert.subject.getField('O').value;\n      this.caOU = caCert.subject.getField('OU').value;\n    })\n  }\n\n}\n","<div class=\"container\">\n  <div class=\"text-center alert-danger\">\n    <br>\n    <h1 class=\"display-4\">Paired-Token Authentication </h1>\n    <h2 class=\"display-6\"> - 쌍토큰을 이용한 인증 -  </h2>\n    <br><br>\n    <a class=\"btn btn-primary\" routerLink='/register'> Register </a>\n    &nbsp;&nbsp;\n    <a class=\"btn btn-success\" routerLink='/login'> Login </a>\n    <br><br>\n  </div>\n\n\n  <hr>\n\n  <h4> Server Certificate  </h4>\n  <p>\n    When client connects to this page, server sends server certificate and one-time digital signature to client. Client can verify the authenticity of the server from the signature. Server certificate is stored in LocalStorage of the browser and is used to encrypt the login information (ID/Password).\n  </p>\n  <div class=\"alert alert-info\">\n\n    <p>\n      Common Name: {{caCommon}}  <br>\n      Organization: {{caOrganization}} <br>\n      Org Unit: {{caOU}}\n    </p>\n    <label class=\"form-label\">Server certificate (stored in LocalStorage):</label>\n    <textarea class=\"form-control\" rows=\"8\">{{caCertPem}} </textarea>\n  </div>\n  <hr>\n\n  <h4> Verification of server using one-time signature </h4>\n  <div class=\"alert alert-success\">\n    <p>\n      Current Time: {{currentTime}} <br>\n      Nonce: {{nonceHex}}\n    </p>\n    <label class=\"form-label\">One-time signature:</label>\n    <textarea class=\"form-control\" rows=\"5\">{{signatureHex}} </textarea>\n    <br>\n    <h3 class=\"alert-danger\"> Signature verification: {{verified}} - Server is authentic! </h3>\n  </div>\n\n</div>\n","<div *ngIf=\"name\">\n  <h2 class=\"page-header\"> Paired Token Authentication </h2>\n  <div class=\"alert\" role=\"alert\">\n    <p>\n      Demonstration of paired token authentication\n    </p>\n  </div>\n\n  <br>\n  <div class=\"alert alert-success\" role=\"alert\">\n    <h2 class=\"page-header\"> Information sent to the server to access this page </h2>\n    <p>Public Token:\n      <textarea class=\"form-control\" rows=\"6\"> {{ptoken}}</textarea>\n    </p>\n    <p>Current Time : {{ctime}}</p>\n    <p>One-time Auth : {{auth}}</p>\n    <p>One-time Auth is changing depending on current time, thus eavesdropping of this information is useless.</p>\n  </div>\n\n  <br>\n  <h2 class=\"page-header\"> PTA successful </h2>\n  <ul class=\"list-group\">\n    <li class=\"list-group-item\">Name: {{name}}</li>\n    <li class=\"list-group-item\">Username: {{username}}</li>\n    <li class=\"list-group-item\">Email: {{email}}</li>\n    <li class=\"list-group-item\">Age: {{age}}</li>\n  </ul>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.scss']\n})\nexport class ProfileComponent implements OnInit {\n  name: string;\n  username: string;\n  email: string;\n  age: number;\n  ptoken: any;  // Public token\n  stoken: any;  // Secret token\n  ctime: any;   // Client current time\n  auth: any;    // One-time auth info\n\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    this.ctime = new Date().getTime().toString();\n    this.ptoken = localStorage.getItem('ptoken');\n    this.stoken = localStorage.getItem('stoken');\n    this.auth = this.authService.computeAuth(this.ctime, this.stoken);\n\n    this.authService.getProfile(this.ptoken, this.ctime, this.auth).subscribe(profile => {\n      this.name = profile.userNoPW.name;\n      this.username = profile.userNoPW.username;\n      this.email = profile.userNoPW.email;\n      this.age = profile.userNoPW.age;\n    }, err => {\n      console.log(err);\n      this.authService.logout();\n      this.router.navigate(['login']);\n      return false;\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { FlashMessagesService } from 'angular2-flash-messages';\n\nimport * as forge from 'node-forge';\n\n@Component({\n  selector: 'app-encrypt',\n  templateUrl: './encrypt.component.html',\n  styleUrls: ['./encrypt.component.scss']\n})\nexport class EncryptComponent implements OnInit {\n\n  plaintext: string;  // User input\n  ctime: any;         // Client current time\n  ptoken: any;        // Public token\n  stoken: any;        // Secret token\n  key: any;           // Generated one-time secret key\n  encrypted: any;     // Ciphertext\n  decrypted: any;     // Deciphered plaintext\n\n  constructor(\n    private authService: AuthService,\n    private flashMessage: FlashMessagesService\n  ) { }\n\n  ngOnInit() {\n  }\n\n  onEncryptSubmit() {\n    this.ctime = new Date().getTime().toString();\n    this.ptoken = localStorage.getItem('ptoken');\n    this.stoken = localStorage.getItem('stoken');\n    this.key = this.authService.getKey(this.ctime, this.stoken);\n    this.encrypted = this.authService.getEncrypt(this.plaintext, this.key);\n\n    this.authService.encryptedMessage(this.encrypted, this.ctime, this.ptoken).subscribe(data => {\n      if (data.decrypted) {\n        this.decrypted = forge.util.decodeUtf8(data.decrypted.data);\n      }\n    });\n  }\n\n}\n","<h2 class=\"page-header\">Message Encryption </h2>\n<div class=\"alert\" role=\"alert\">\n  <p>\n    This page demonstrates message encryption using one-time secret key which is changing continually depending on time.\n    Server can recover the same one-time secret key and decrypt the ciphertext. Try to send the same message repeatedly,\n    then check the changing of one-time secret key.\n  </p>\n</div>\n<hr>\n<form (ngSubmit)=\"onEncryptSubmit()\">\n  <div class=\"mb-3\">\n    <label class=\"form-label\"> Type in input message.</label>\n    <textarea class=\"form-control\" rows=\"5\" [(ngModel)]=\"plaintext\" name=\"plaintext\"></textarea>\n  </div>\n  <input type=\"submit\" class=\"btn btn-primary\" value=\"Send Encrypted Message\">\n</form>\n<hr>\n\n<div class=\"alert alert-info\" role=\"alert\">\n  <h4>Generated one-time secret key </h4>\n  <p>{{key}}</p>\n</div>\n\n<div class=\"alert alert-warning\" role=\"alert\">\n  <h4> Information sent to the server </h4>\n  <p> - Public Token:\n    <textarea class=\"form-control\" rows=\"5\"> {{ptoken}}</textarea>\n  </p>\n  <p> - Current Time: {{ctime}} </p>\n  <p> - Ciphertext:\n    <textarea class=\"form-control\" rows=\"5\"> {{encrypted}}</textarea>\n  </p>\n</div>\n\n<div class=\"alert alert-success\" role=\"alert\">\n  <h4> Server reply of decrypted message </h4>\n  <textarea class=\"form-control\" rows=\"5\"> {{decrypted}}</textarea>\n</div>\n","<h2 class=\"page-header\">User List </h2>\n<div class=\"alert\" role=\"alert\">\n  <p>\n    Show user list registered in this server. This is a simple demonstration of db queries.\n  </p>\n</div>\n<table class=\"table table-striped\">\n  <thead class=\"table-dark\">\n    <tr>\n      <th>Name</th>\n      <th>Username</th>\n      <th>Email</th>\n      <th>Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let user of users\">\n      <td>{{user.name}}</td>\n      <td>{{user.username}}</td>\n      <td>{{user.email}}</td>\n      <td>{{user.age}}</td>\n    </tr>\n  </tbody>\n</table>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.scss']\n})\nexport class ListComponent implements OnInit {\n  constructor(private authService: AuthService) { }\n  users: any;\n  ngOnInit() {\n    this.authService.getList().subscribe(users => {\n      this.users = users;\n    });\n  }\n}\n","<div *ngIf=\"name\">\n  <h2 class=\"page-header\">Dashboard</h2>\n  <div class=\"alert\" role=\"alert\">\n  <p>\n    Dashboard shows various user information of logged in user. <br>\n    After a successful login server sends UserInfo to client. <br>\n    Public token / secret token is a paired token information issued by the server to the client. <br>\n    If client is equipped with a certificate issued by the server, user certificate is shown. <br>\n    Server certificate is sent to client automatically when client connects the home page.\n  </p>\n</div>\n  <hr>\n\n  <form>\n    <div class=\"form-group\">\n      <label>UserInfo</label>\n      <textarea class=\"form-control\" rows=\"1\" disabled>{{userString}}</textarea>\n    </div>\n    <hr>\n    <div class=\"mb-3\">\n      <label>Public Token</label>\n      <textarea class=\"form-control\" rows=\"8\" disabled>{{ptoken}}</textarea>\n    </div>\n    <div class=\"mb-3\">\n      <label>Secret Token</label>\n      <textarea class=\"form-control\" rows=\"8\" disabled>{{stoken}}</textarea>\n    </div>\n    <hr>\n    <div class=\"mb-3\">\n      <label>User certificate</label>\n      <textarea class=\"form-control\" rows=\"8\" disabled>{{certPem}}</textarea>\n    </div>\n    <div class=\"mb-3\">\n      <label>Server certificate</label>\n      <textarea class=\"form-control\" rows=\"8\" disabled>{{caCertPem}}</textarea>\n    </div>\n  </form>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n  userString: string;\n  name: string;\n  ptoken: string;\n  stoken: string;\n  certPem: string;\n  caCertPem: string;\n\n  constructor() { }\n\n  ngOnInit() {\n    this.userString = localStorage.getItem('userNoPW');\n    this.name = JSON.parse(this.userString).name;\n    this.ptoken = localStorage.getItem('ptoken');\n    this.stoken = localStorage.getItem('stoken');\n    this.certPem = localStorage.getItem('cert');\n    this.caCertPem = localStorage.getItem('caCert');\n  }\n\n}\n","import { Component } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  constructor(public http: HttpClient) { }\n  title = 'angular-src';\n}\n","<app-navbar></app-navbar>\n\n<div class=\"container main\">\n  <flash-messages></flash-messages>\n  <router-outlet></router-outlet>\n</div>\n","import { Injectable } from '@angular/core';\r\nimport { Router, CanActivate } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) {\r\n  }\r\n\r\n  canActivate() {\r\n    if (this.authService.loggedIn()) {\r\n      return true;\r\n    } else {\r\n      this.router.navigate(['/login']);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport { Router } from '@angular/router';\nimport { FlashMessagesService } from 'angular2-flash-messages';\nimport { UserNoPW } from 'src/app/models/User';\nimport * as forge from 'node-forge';\nconst pki = forge.pki;\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  username: string;\n  password: string;\n  userNoPW: UserNoPW;\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private flashMessage: FlashMessagesService\n  ) { }\n\n  ngOnInit() {\n  }\n\n  // ID/Pass login\n  onLoginSubmit() {\n    // Get ca certificate\n    let caCertPem = localStorage.getItem('caCert');\n    let caCert = pki.certificateFromPem(caCertPem);\n    let caPublicKey = caCert.publicKey;\n\n    // Build up LoginInfo\n    const loginInfo = {\n      username: this.username,\n      password: this.password\n    }\n    let loginInfoJson = JSON.stringify(loginInfo);\n\n    // Encrypt LoginInfo with CA's public key\n    let key = forge.random.getBytesSync(16); // Random Session Key for AES encryption\n    let cipher = forge.cipher.createCipher('AES-ECB', key);\n    cipher.start();\n    cipher.update(forge.util.createBuffer(loginInfoJson, 'binary'));\n    cipher.finish();\n    let ciphertext = cipher.output;  // Encrypted userInfo\n    let ciphertextHex = forge.util.bytesToHex(ciphertext);\n    let encryptedKey = caPublicKey.encrypt(key, 'RSA-OAEP');  // Encrypted session key with server's public key\n    let encryptedKeyHex = forge.util.bytesToHex(encryptedKey);\n\n    // Encrypted LoginInfo.\n    const loginInfoEnc = {\n      ciphertextHex: ciphertextHex, // Encrypted userInfo\n      encryptedKeyHex: encryptedKeyHex // Encrypted session key with server's public key\n    }\n\n    this.authService.authenticateUser(loginInfoEnc).subscribe(data => {\n      if (data.success) {\n\n        // Recover UserInfo\n        let ciphertextToHex = data.ciphertextToHex;\n        let ciphertext = forge.util.hexToBytes(ciphertextToHex);\n        let decipher = forge.cipher.createDecipher('AES-ECB', key);\n        decipher.start();\n        decipher.update(forge.util.createBuffer(ciphertext, 'binary'));\n        decipher.finish();\n        let recovered = decipher.output;\n        let recoveredParse = JSON.parse(recovered);\n        let ptoken = recoveredParse.ptoken;\n        let stoken = recoveredParse.stoken;\n        let userNoPW = recoveredParse.userNoPW;\n\n        this.userNoPW = userNoPW;\n\n        // Store Token and User Info\n        this.authService.storeUserData(ptoken, stoken, userNoPW);\n        this.flashMessage.show('You are now logged in', {\n          cssClass: 'alert-success',\n          timeout: 5000\n        });\n        this.router.navigate(['dashboard']);  //Logged in and Redirect to dashboard\n      } else {\n        this.flashMessage.show(data.msg, {\n          cssClass: 'alert-danger',\n          timeout: 5000\n        });\n        this.router.navigate(['login']);  // Login failed and redirect to Login page\n      }\n    });\n  }\n\n  // One-click easy login using digital signature\n  onLoginSigSubmit() {\n    this.authService.authenticateSigUser().subscribe(data => {\n      if (data.success) {\n        this.authService.storeUserData(data.ptoken, data.stoken, data.userNoPW);\n        this.flashMessage.show('Easy login successful', { cssClass: 'alert-success', timeout: 5000 });\n        this.router.navigate(['dashboard']);\n      } else {\n        this.flashMessage.show(data.msg, { cssClass: 'alert-danger', timeout: 5000 });\n        this.router.navigate(['login']);\n      }\n    });\n  }\n}\n","<h2 class=\"page-header\">Login </h2>\n<br>\n<p>\n  ID/Pass login information is encrypted with server's public key, thus your browser should be equipped with server certificate. If you experience any difficulty in ID/Pass login, visit home and get server certificate, and then try again.\n</p>\n<p>\n  One-click quick login can be used only after your browser is equipped with certificate issued by the server. First, you need to get the certificate from the server after a successful login, and then try one-click quick login.\n</p>\n<div class=\"row\">\n  <div class=\"col-md-6\">\n    <div class=\"alert alert-warning\">\n      <h3 class=\"page-header\">ID/Pass Login </h3>\n\n      <form (ngSubmit)=\"onLoginSubmit()\">\n        <div class=\"mb-3\">\n          <label class=\"form-label\">Username</label>\n          <input type=\"text\" class=\"form-control\" name=\"username\" [(ngModel)]=\"username\">\n        </div>\n        <div class=\"mb-3\">\n          <label class=\"form-label\">Password</label>\n          <input type=\"password\" class=\"form-control\" name=\"password\" [(ngModel)]=\"password\">\n        </div>\n        <input type=\"submit\" class=\"btn btn-primary\" value=\"Login\">\n        <br>\n      </form>\n      <br>\n    </div>\n  </div>\n  <div class=\"col-md-6\">\n    <div class=\"alert alert-info\">\n      <h3 class=\"page-header\"> One-click Quick Login </h3>\n      <br>\n      <form (ngSubmit)=\"onLoginSigSubmit()\">\n        <input type=\"submit\" class=\"btn btn-secondary\" value=\"One-click Quick Login\">\n      </form>\n      <br>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ValidateService } from '../../services/validate.service';\nimport { AuthService } from '../../services/auth.service';\nimport { FlashMessagesService } from 'angular2-flash-messages';\nimport { Router } from '@angular/router';\nimport * as forge from 'node-forge';\n\nconst pki = forge.pki;\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  name: string;\n  email: string;\n  username: string;\n  password1: string;\n  password2: string;\n  password: string;\n  age: number;\n\n  constructor(\n    private validateService: ValidateService,\n    private flashMessage: FlashMessagesService,\n    private authService: AuthService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n  }\n\n  onRegisterSubmit() {\n\n    // Get Server certificate\n    const caCertPem = localStorage.getItem('caCert');\n    const caCert = pki.certificateFromPem(caCertPem);\n    const caPublicKey = caCert.publicKey;\n\n    // Check two password inputs\n    if (this.password1 !== this.password2) {\n      this.flashMessage.show('Two password inputs are not equal', { cssClass: 'alert-danger', timeout: 3000 });\n      return false;\n    }\n\n    // Generate new user info\n    const userInfo = {\n      name: this.name,\n      email: this.email,\n      username: this.username,\n      password: this.password1,\n      age: this.age\n    };\n\n    const userInfoJson = JSON.stringify(userInfo);\n\n    // Check all input fields\n    if (!this.validateService.validateRegister(userInfo)) {\n      this.flashMessage.show('Fill out all required fields!', { cssClass: 'alert-danger', timeout: 3000 });\n      return false;\n    }\n\n    // Validate email address\n    if (!this.validateService.validateEmail(userInfo.email)) {\n      this.flashMessage.show('Use correct email address!', { cssClass: 'alert-danger', timeout: 3000 });\n      return false;\n    }\n\n    // Encrypt Login Info with Server's public key\n    let key = forge.random.getBytesSync(16); // Random Session Key for AES encryption\n    let cipher = forge.cipher.createCipher('AES-ECB', key);\n    cipher.start();\n    cipher.update(forge.util.createBuffer(userInfoJson, 'binary'));\n    cipher.finish();\n    let ciphertext = cipher.output;  // Encrypted userInfo\n    let ciphertextHex = forge.util.bytesToHex(ciphertext);\n    let encryptedKey = caPublicKey.encrypt(key, 'RSA-OAEP');  // PublicKey-encrypted session key\n    let encryptedKeyHex = forge.util.bytesToHex(encryptedKey);\n\n    // Encrypted Login Info\n    const register = {\n      ciphertextHex: ciphertextHex,\n      encryptedKeyHex: encryptedKeyHex\n    }\n\n    // Register New User\n    this.authService.registerUser(register).subscribe(data => {\n      if (data.success) {\n        this.flashMessage.show(data.msg, { cssClass: 'alert-success', timeout: 3000 });\n        this.router.navigate(['/login']);\n      } else {\n        this.flashMessage.show(data.msg, { cssClass: 'alert-danger', timeout: 3000 });\n        this.router.navigate(['/register']);\n      }\n    });\n\n  }\n}\n","<h2 class=\"page-header\">Register</h2>\n<form (ngSubmit)=\"onRegisterSubmit()\">\n  <div class=\"form-group\">\n    <label> Name </label>\n    <input type=\"text\" [(ngModel)]=\"name\" name=\"name\" class=\"form-control\">\n  </div>\n  <div class=\"form-group\">\n    <label> Email </label>\n    <input type=\"text\" [(ngModel)]=\"email\" name=\"email\" class=\"form-control\">\n  </div>\n  <div class=\"form-group\">\n    <label> Age </label>\n    <input type=\"text\" [(ngModel)]=\"age\" name=\"age\" class=\"form-control\">\n  </div>\n  <div class=\"form-group\">\n    <label> Username </label>\n    <input type=\"text\" [(ngModel)]=\"username\" name=\"username\" class=\"form-control\">\n  </div>\n  <div class=\"form-group\">\n    <label> Password1 </label>\n    <input type=\"password\" [(ngModel)]=\"password1\" name=\"password1\" class=\"form-control\">\n  </div>\n  <div class=\"form-group\">\n    <label> Password2 </label>\n    <input type=\"password\" [(ngModel)]=\"password2\" name=\"password2\" class=\"form-control\">\n  </div>\n  <input type=\"submit\" class=\"btn btn-primary\" value=\"Submit\">\n</form>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { ProfileComponent } from './components/profile/profile.component';\nimport { ListComponent } from './components/list/list.component';\n\nimport { ValidateService } from './services/validate.service';\nimport { AuthService } from './services/auth.service';\nimport { FlashMessagesModule } from 'angular2-flash-messages';\nimport { FlashMessagesService } from 'angular2-flash-messages';\nimport { AuthGuard } from './guards/auth.guard';\n\nimport { JwtModule } from '@auth0/angular-jwt';\nimport { EncryptComponent } from './components/encrypt/encrypt.component';\nimport { MacComponent } from './components/mac/mac.component';\nimport { BlogComponent } from './components/blog/blog.component';\nimport { AboutComponent } from './components/about/about.component';\nimport { CertComponent } from './components/cert/cert.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavbarComponent,\n    LoginComponent,\n    RegisterComponent,\n    HomeComponent,\n    DashboardComponent,\n    ProfileComponent,\n    ListComponent,\n    EncryptComponent,\n    MacComponent,\n    BlogComponent,\n    AboutComponent,\n    CertComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FlashMessagesModule,\n    JwtModule.forRoot({\n      config: {\n        tokenGetter: () => {\n          return localStorage.getItem('id_token');\n        }\n      }\n    })\n  ],\n  providers: [ValidateService, AuthService, FlashMessagesService, AuthGuard],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { FlashMessagesService } from 'angular2-flash-messages';\nimport * as forge from 'node-forge';\n\n@Component({\n  selector: 'app-mac',\n  templateUrl: './mac.component.html',\n  styleUrls: ['./mac.component.scss']\n})\nexport class MacComponent implements OnInit {\n\n  plaintext: string;    // User input plaintext\n  ctime: any;           // Client current time\n  ptoken: any;          // Public token\n  stoken: any;          // Secret token\n  mac: any;             // Mac value\n  key: any;             // One-time secret key\n  msg: string;          // Server reply message\n\n  constructor(\n    private authService: AuthService,\n    private flashMessage: FlashMessagesService\n  ) { }\n\n  ngOnInit() {\n  }\n\n  onMacSubmit() {\n    this.ctime = new Date().getTime().toString();\n    this.ptoken = localStorage.getItem('ptoken');\n    this.stoken = localStorage.getItem('stoken');\n    this.key = this.authService.getKey(this.ctime, this.stoken);\n    const plaintextUtf8 = forge.util.encodeUtf8(this.plaintext);\n    this.mac = this.authService.getMac(plaintextUtf8, this.key);\n\n    this.authService.macMessage(plaintextUtf8, this.ctime, this.ptoken, this.mac).subscribe(data => {\n      console.log(data);\n      this.msg = data.msg;\n    });\n  }\n\n}\n","<h2 class=\"page-header\">Message Authentication </h2>\n<div class=\"alert\" role=\"alert\">\n  <p>\n    This page demonstrates message authentication using one-time secret key which is changing continually depending on\n    time.\n    Server can recover the same one-time secret key and check the authenticity of message. Try to send the same message\n    repeatedly, then check the changing of one-time secret key.\n  </p>\n</div>\n<hr>\n<form (ngSubmit)=\"onMacSubmit()\">\n  <div class=\"mb-3\">\n    <label class=\"form-label\"> Type in input message.</label>\n    <textarea class=\"form-control\" rows=\"3\" [(ngModel)]=\"plaintext\" name=\"plaintext\"></textarea>\n  </div>\n  <input type=\"submit\" class=\"btn btn-primary\" value=\"Send Message\">\n</form>\n<hr>\n\n<div class=\"alert alert-info\" role=\"alert\">\n  <h4>Generated one-time secret key </h4>\n  <p>{{key}}</p>\n</div>\n\n<div class=\"alert alert-warning\" role=\"alert\">\n  <h4> Information sent to the server </h4>\n  <p> - Public Token:\n    <textarea class=\"form-control\" rows=\"5\"> {{ptoken}}</textarea>\n  </p>\n  <p> - Current Time: {{ctime}} </p>\n  <p> - Message:\n    <textarea class=\"form-control\" rows=\"3\"> {{plaintext}}</textarea>\n  </p>\n  <p> - MAC: {{mac}} </p>\n</div>\n\n<div class=\"alert alert-success\" role=\"alert\">\n  <h4> Server reply </h4>\n  <p> {{msg}} </p>\n</div>\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidateService {\n\n  constructor() { }\n\n  validateRegister(user) {\n    if (user.name == undefined || user.email == undefined || user.username == undefined || user.password == undefined) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  validateEmail(email) {\n    var re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n  }\n\n}\n","<nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n  <div class=\"container\">\n    <a class=\"navbar-brand\" routerLink='/'>PairedTokenAuth</a>\n    <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\n\n        <li class=\"nav-item\">\n          <a class=\"nav-link active\" aria-current=\"page\" routerLink='/'>Home</a>\n        </li>\n        <li class=\"nav-item\">\n          <a class=\"nav-link\" aria-current=\"page\" routerLink='/about'>Intro</a>\n        </li>\n        <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\" aria-current=\"page\" >\n          <a class=\"nav-link\" routerLink='/dashboard'> Dashboard </a>\n        </li>\n        <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\" aria-current=\"page\" >\n          <a class=\"nav-link\" routerLink='/blog'> JWT </a>\n        </li>\n        <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\" aria-current=\"page\" >\n          <a class=\"nav-link\" routerLink='/profile'>PTA </a>\n        </li>\n        <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\" aria-current=\"page\" >\n          <a class=\"nav-link\" routerLink='/encrypt'> Encrypt </a>\n        </li>\n        <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\" aria-current=\"page\" >\n          <a class=\"nav-link\" routerLink='/mac'> Mac </a>\n        </li>\n        <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\" aria-current=\"page\" >\n          <a class=\"nav-link\" routerLink='/cert'> Certificate </a>\n        </li>\n        <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\" aria-current=\"page\" >\n          <a class=\"nav-link\" routerLink='/list'>List</a>\n        </li>\n      </ul>\n\n      <ul class=\"navbar-nav ml-auto\">\n        <li *ngIf=\"!checkLoggedIn()\" class=\"nav-item\" aria-current=\"page\">\n          <a class=\"nav-link\" routerLink='/login'>Login</a>\n        </li>\n        <li *ngIf=\"!checkLoggedIn()\" class=\"nav-item\" aria-current=\"page\">\n          <a class=\"nav-link\" routerLink='/register'>Register</a>\n        </li>\n        <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\" aria-current=\"page\">\n          <a class=\"nav-link\" (click)=\"onLogoutClick()\" href=\"#\">Logout</a>\n        </li>\n        <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\" aria-current=\"page\">\n          <a class=\"nav-link\" (click)=\"onDeleteCertClick()\"\n            href=\"#\">DeleteCert</a>\n        </li>\n      </ul>\n\n    </div>\n  </div>\n</nav>\n\n\n<!--\n<nav class=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n  <a class=\"navbar-brand\" routerLink='/'>DualTokenAuth</a>\n  <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\"\n    aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n    <span class=\"navbar-toggler-icon\"></span>\n  </button>\n\n  <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n    <ul class=\"navbar-nav mr-auto\">\n      <li class=\"nav-item\"><a class=\"nav-link\" routerLink='/'>Home</a></li>\n      <li class=\"nav-item\"><a class=\"nav-link\" routerLink='/about'>Intro</a></li>\n      <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\"><a class=\"nav-link\" routerLink='/dashboard'> Dashboard </a></li>\n      <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\"><a class=\"nav-link\" routerLink='/list'>List</a></li>\n      <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\"><a class=\"nav-link\" routerLink='/blog'> JWT </a></li>\n      <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\"><a class=\"nav-link\" routerLink='/profile'>DTA </a></li>\n      <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\"><a class=\"nav-link\" routerLink='/encrypt'> Encrypt </a></li>\n      <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\"><a class=\"nav-link\" routerLink='/mac'> Mac </a></li>\n      <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\"><a class=\"nav-link\" routerLink='/cert'> Certificate </a></li>\n    </ul>\n    <ul class=\"navbar-nav ml-auto\">\n      <li *ngIf=\"!checkLoggedIn()\" class=\"nav-item\"><a class=\"nav-link\" routerLink='/login'>Login</a></li>\n      <li *ngIf=\"!checkLoggedIn()\" class=\"nav-item\"><a class=\"nav-link\" routerLink='/register'>Register</a></li>\n      <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\"><a class=\"nav-link\" (click)=\"onLogoutClick()\" href=\"#\">Logout</a>\n      </li>\n      <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\"><a class=\"nav-link\" (click)=\"onDeleteCertClick()\"\n          href=\"#\">DeleteCert</a>\n      </li>\n    </ul>\n  </div>\n</nav> -->\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport { Router } from '@angular/router';\nimport { FlashMessagesService } from 'angular2-flash-messages';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private flashMessage: FlashMessagesService\n  ) { }\n\n  ngOnInit() {\n  }\n\n  onLogoutClick() {\n    this.authService.logout();\n    this.flashMessage.show('You are now logged out. Login again?', {\n      cssClass: 'alert-success',\n      timeout: 3000\n    });\n    this.router.navigate(['/login']);\n    return false;\n  }\n\n  checkLoggedIn() {\n    return this.authService.loggedIn();\n  }\n\n  onDeleteCertClick() {\n    localStorage.clear();   // Clear localStorage\n    this.authService.logout();\n    this.flashMessage.show('Certificate deleted. You are now logged out. ', {\n      cssClass: 'alert-success',\n      timeout: 3000\n    });\n    this.router.navigate(['/login']);\n    return false;\n  }\n}\n","<div *ngIf=\"name\">\n  <h2 class=\"page-header\"> JWT Authentication </h2>\n  <div class=\"alert\" role=\"alert\">\n    <p>\n      This is a simple demonstration of the JWT authentication. In JWT authentication client sends static JWT token to the server, and then server checks the authenticity of the static JWT token and accept request if it is valid. This authentication process should be protected with an encryption.\n    </p>\n  </div>\n\n  <br>\n  <div class=\"alert alert-success\" role=\"alert\">\n    <h2 class=\"page-header\"> Information sent to the server to access this page </h2>\n    <p>Public Token :\n      <textarea class=\"form-control\" rows=\"5\"> {{ptoken}}</textarea>\n    </p>\n\n    <p>\n      Fixed JWT(ptoken) is sent to the server repeatedly. <br>\n      If eavesdropping attacker gets this token, s/he will be able to logged in easily. <br>\n      Thus, this communication should be protected with https protocol.\n    </p>\n  </div>\n\n  <br>\n  <h2 class=\"page-header\"> JWT Authentication Successful </h2>\n  <ul class=\"list-group\">\n    <li class=\"list-group-item\">Name: {{name}}</li>\n    <li class=\"list-group-item\">Username: {{username}}</li>\n    <li class=\"list-group-item\">Email: {{email}}</li>\n    <li class=\"list-group-item\">Age: {{age}}</li>\n  </ul>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-blog',\n  templateUrl: './blog.component.html',\n  styleUrls: ['./blog.component.scss']\n})\nexport class BlogComponent implements OnInit {\n\n  name: string;\n  username: string;\n  email: string;\n  age: number;\n  ptoken: any;\n\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    this.ptoken = localStorage.getItem('ptoken');\n\n    this.authService.getBlog().subscribe(blog => {\n      this.name = blog.user.name;\n      this.username = blog.user.username;\n      this.email = blog.user.email;\n      this.age = blog.user.age;\n    }, err => {\n      console.log(err);\n      return false;\n    });\n\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { User, Login, UserNoPW } from '../models/User';\nimport { JwtHelperService } from '@auth0/angular-jwt';\n\nimport * as forge from 'node-forge';\nconst pki = forge.pki;\n\n// Basic header option\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  ptoken: any;          // Public token\n  stoken: any;          // Secret token\n  userNoPW: UserNoPW;   // Logged in user information without password\n\n  constructor(\n    private http: HttpClient,\n    public jwtHelper: JwtHelperService\n  ) { }\n\n  // 0. API Connection\n  prepEndpoint(ep) {\n    // 1. localhost service\n    // return 'http://localhost:3000/' + ep;\n\n    // 2. Heroku cloud porting\n    return ep;\n  }\n\n  // 1. Connecting Home, distribute server certificate\n  connectHome(): Observable<any> {\n    const homeUrl = this.prepEndpoint('users/home');\n    return this.http.get(homeUrl, httpOptions);\n  }\n\n  // 2. Register new user\n  registerUser(register): Observable<any> {\n    const registerUrl = this.prepEndpoint('users/register');\n    return this.http.post<User>(registerUrl, register, httpOptions);\n  }\n\n  // 3. ID/Pass login\n  authenticateUser(login): Observable<any> {\n    const loginUrl = this.prepEndpoint('users/authenticate');\n    return this.http.post(loginUrl, login, httpOptions);\n  }\n\n  // 4. One-click easy login\n  authenticateSigUser(): Observable<any> {\n    const privateKeyPem = localStorage.getItem('privateKey');\n    const privateKey = pki.privateKeyFromPem(privateKeyPem);\n    const certPem = localStorage.getItem('cert');\n    const currentTime = new Date().getTime();\n    const cert = pki.certificateFromPem(certPem);\n    const username = cert.subject.getField('CN').value;\n\n    // Signature generation on username, currentTime\n    let md = forge.md.sha1.create();\n    md.update(username, 'utf8');\n    md.update(currentTime, 'utf8');\n    const signature = privateKey.sign(md);\n    const signatureHex = forge.util.bytesToHex(signature);\n\n    // Easy login request\n    const request = {\n      username: username,\n      currentTime: currentTime,\n      signatureHex: signatureHex,\n      certPem: certPem\n    };\n\n    const loginUrl = this.prepEndpoint('users/authenticateSig');\n    return this.http.post(loginUrl, request, httpOptions);\n  }\n\n  // 5. Profile page using dual-token authentication (DTA)\n  getProfile(ptoken, ctime, auth): Observable<any> {\n    // Http header option for DTA\n    const httpOptions1 = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': ptoken,\n        'Ctime': ctime,\n        'Auth': auth\n      })\n    };\n\n    const profileUrl = this.prepEndpoint('users/profile');\n    return this.http.get(profileUrl, httpOptions1);\n  }\n\n  // 6. Blog page using standard JWT authentication\n  getBlog(): Observable<any> {\n    // http header option for JWT\n    const httpOptions2 = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.ptoken\n      })\n    };\n\n    const blogUrl = this.prepEndpoint('users/blog');\n    return this.http.get(blogUrl, httpOptions2);\n  }\n\n  // 7. Show user list\n  getList(): Observable<any> {\n    const listUrl = this.prepEndpoint('users/list');\n    return this.http.get(listUrl, httpOptions);\n  }\n\n  // 8. Message encryption using one-time secret key\n  encryptedMessage(encrypted, ctime, ptoken): Observable<any> {\n    // http header option for message encryption\n    const httpOptions3 = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': ptoken,\n        'Ctime': ctime,\n        'Enc': encrypted\n      })\n    };\n\n    const encryptUrl = this.prepEndpoint('users/encrypt');\n    return this.http.get(encryptUrl, httpOptions3);\n  }\n\n  getEncrypt(plaintext, key) {\n    let plaintextUtf8 = forge.util.encodeUtf8(plaintext);\n    let key1 = forge.util.hexToBytes(key);\n    let cipher = forge.cipher.createCipher('AES-ECB', key1);\n    cipher.start();\n    cipher.update(forge.util.createBuffer(plaintextUtf8, 'binary'));\n    cipher.finish();\n    let ciphertext = cipher.output;\n    return forge.util.bytesToHex(ciphertext);\n  }\n\n  // 9. Message authentication using one-time secret key\n  macMessage(plaintext, ctime, ptoken, mac): Observable<any> {\n    // http header option for message authentication\n    const httpOptions4 = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': ptoken,\n        'Ctime': ctime,\n        'Mac': mac,\n        'Plaintext': plaintext\n      })\n    };\n\n    const macUrl = this.prepEndpoint('users/mac');\n    return this.http.get(macUrl, httpOptions4);\n  }\n\n  getMac(plaintext, key) {\n    let md = forge.md.sha256.create();\n    md.update(plaintext + key);\n    return md.digest().toHex();\n  }\n\n  // 10. Issuing certificate\n  certRequest(request): Observable<any> {\n    // Key generation\n    let keyPair = pki.rsa.generateKeyPair(2048);\n    let publicKey = keyPair.publicKey;\n    let privateKey = keyPair.privateKey;\n    let publicKeyPem = pki.publicKeyToPem(publicKey);\n    let privateKeyPem = pki.privateKeyToPem(privateKey);\n\n    // Storing private key\n    localStorage.setItem('privateKey', privateKeyPem);\n\n    // Certificate request. UTF-8 encoding.\n    const req = {\n      country: forge.util.encodeUtf8(request.country),\n      state: forge.util.encodeUtf8(request.state),\n      locality: forge.util.encodeUtf8(request.locality),\n      organization: forge.util.encodeUtf8(request.organization),\n      orgUnit: forge.util.encodeUtf8(request.orgUnit),\n      common: request.common, // common = username should be English\n      publicKey: publicKeyPem\n    }\n\n    const certUrl = this.prepEndpoint('users/cert');\n    return this.http.post(certUrl, req, httpOptions);\n  }\n\n  // Other utility functions\n  // 1. Store user data in LocalStorage\n  storeUserData(ptoken, stoken, userNoPW) {\n    localStorage.setItem('ptoken', ptoken);\n    localStorage.setItem('stoken', stoken);\n    localStorage.setItem('userNoPW', JSON.stringify(userNoPW));\n    this.ptoken = ptoken;\n    this.stoken = stoken;\n    this.userNoPW = userNoPW;\n  }\n\n  // 2. Delete user info in logout\n  logout() {\n    this.ptoken = null;\n    this.stoken = null;\n    this.userNoPW = null;\n    localStorage.removeItem('ptoken');\n    localStorage.removeItem('stoken');\n    localStorage.removeItem('userNoPW');\n  }\n\n  // 3. Check loggedIn state using JWT\n  loggedIn() {\n    return !this.jwtHelper.isTokenExpired(this.ptoken);\n  }\n\n  // 4. Generate one-time key\n  getKey(ctime, stoken) {\n    let md = forge.md.sha256.create();\n    md.update(ctime + stoken);\n    const key = md.digest().toHex();\n    return key;\n  }\n\n  // 5. Generate one-time auth\n  computeAuth(ctime, stoken) {\n    let md = forge.md.sha256.create();\n    md.update(ctime + stoken);\n    return md.digest().toHex();\n  }\n\n  // 6. Store certificate\n  storeCert(cert, caCert) {\n    localStorage.setItem('cert', cert);\n    localStorage.setItem('caCert', caCert);\n  }\n}\n\n\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Router } from '@angular/router';\nimport { FlashMessagesService } from 'angular2-flash-messages';\n\n@Component({\n  selector: 'app-cert',\n  templateUrl: './cert.component.html',\n  styleUrls: ['./cert.component.scss']\n})\nexport class CertComponent implements OnInit {\n  country: string;\n  state: string;\n  locality: string;\n  organization: string;\n  orgUnit: string;\n  common: string;\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private flashMessage: FlashMessagesService\n  ) { }\n\n  ngOnInit() {\n    this.common = JSON.parse(localStorage.getItem('userNoPW')).username;\n  }\n\n  onCertRequest() {\n    const request = {\n      country: this.country,\n      state: this.state,\n      locality: this.locality,\n      organization: this.organization,\n      orgUnit: this.orgUnit,\n      common: this.common\n    }\n\n    this.authService.certRequest(request).subscribe(data => {\n      if (data.success) {\n        this.authService.storeCert(data.cert, data.caCert);\n        this.flashMessage.show('Your certificate was issued.', {\n          cssClass: 'alert-success',\n          timeout: 3000\n        });\n        this.router.navigate(['dashboard']);\n      } else {\n        this.flashMessage.show('Certificate issuing fails', {\n          cssClass: 'alert-danger',\n          timeout: 3000\n        });\n        this.router.navigate(['cert']);\n      }\n    });\n  }\n}\n","<h2 class=\"page-header\">Certificate Request</h2>\n<form (ngSubmit)=\"onCertRequest()\">\n  <div class=\"mb-3\">\n    <label class=\"form-label\"> Common Name - common name is same as username. It is auto typed in. </label>\n    <input type=\"text\" [(ngModel)]=\"common\" name=\"common\" class=\"form-control\" disabled>\n  </div>\n  <div class=\"mb-3\">\n    <label class=\"form-label\"> Organizational Unit Name </label>\n    <input type=\"text\" [(ngModel)]=\"orgUnit\" name=\"orgUnit\" class=\"form-control\">\n  </div>\n  <div class=\"mb-3\">\n    <label class=\"form-label\"> Organization Name </label>\n    <input type=\"text\" [(ngModel)]=\"organization\" name=\"organization\" class=\"form-control\">\n  </div>\n  <div class=\"mb-3\">\n    <label class=\"form-label\"> Locality Name </label>\n    <input type=\"text\" [(ngModel)]=\"locality\" name=\"locality\" class=\"form-control\">\n  </div>\n  <div class=\"mb-3\">\n    <label class=\"form-label\"> State or Province Name </label>\n    <input type=\"text\" [(ngModel)]=\"state\" name=\"state\" class=\"form-control\">\n  </div>\n  <div class=\"mb-3\">\n    <label class=\"form-label\"> Country - KR for Korea </label>\n    <input type=\"text\" [(ngModel)]=\"country\" name=\"country\" class=\"form-control\">\n  </div>\n  <input type=\"submit\" class=\"btn btn-primary\" value=\"Certificate Request\">\n</form>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { ProfileComponent } from './components/profile/profile.component';\nimport { ListComponent } from './components/list/list.component';\n\nimport { AuthGuard } from './guards/auth.guard';\nimport { EncryptComponent } from './components/encrypt/encrypt.component';\nimport { MacComponent } from './components/mac/mac.component';\nimport { BlogComponent } from './components/blog/blog.component';\nimport { AboutComponent } from './components/about/about.component';\nimport { CertComponent } from './components/cert/cert.component';\n\nconst routes: Routes = [\n  { path: '', component: HomeComponent },\n  { path: 'navbar', component: NavbarComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent },\n  { path: 'about', component: AboutComponent },\n  { path: 'dashboard', component: DashboardComponent, canActivate: [AuthGuard] },\n  { path: 'profile', component: ProfileComponent, canActivate: [AuthGuard] },\n  { path: 'list', component: ListComponent, canActivate: [AuthGuard] },\n  { path: 'encrypt', component: EncryptComponent, canActivate: [AuthGuard] },\n  { path: 'mac', component: MacComponent, canActivate: [AuthGuard] },\n  { path: 'blog', component: BlogComponent, canActivate: [AuthGuard] },\n  { path: 'cert', component: CertComponent, canActivate: [AuthGuard] }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}